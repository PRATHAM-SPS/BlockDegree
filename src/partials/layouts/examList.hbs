{{> includes/hero hero-title="Exams"}}

<style>
  [data-notify="container"][class*="alert-pastel-"] {
    background-color: rgb(255, 255, 238);
    border-width: 0px;
    border-left: 15px solid rgb(255, 240, 106);
    border-radius: 0px;
    box-shadow: 0px 0px 5px rgba(51, 51, 51, 0.3);
  }

  [data-notify="container"].alert-pastel-info {
    border-left-color: greenyellow;
  }

  [data-notify="container"][class*="alert-pastel-"]>[data-notify="title"] {
    color: rgb(80, 80, 57);
    display: block;
    font-weight: 700;
    margin-bottom: 5px;
  }
</style>
<div class="container__cstm">
  {{!-- This is exam list --}}
  <div>
    <h3>Points to Note</h3><br>
    <ol>
      <li>Below are the current courses available on our platform. Please <strong>ENROLL</strong> in the course of your
        choice.</li>
      <li> If you have already enrolled in one of our courses then you <strong>Take Exam</strong> for certification
        after completing
        the <strong>whole curriculum</strong> for that given course.</li>
    </ol>
    <div><strong>Warning:</strong> Check / update your name before taking exam as the certificate will be generated
      on that name only & cannot be changed.
    </div>
    <br>
  </div>

  <div class="row" id="exams__list">
    {{#each json.courses as |course index|}}
    <div class="col-lg-4 col-md-4 single-exam__course mb-4">
      <div class="card height--full">
        <div class="card-body row mx-0 p-0">
          <h3 class="card-title p-4 text-center mb-0">{{this.title}}</h3>
          <div class="card-text p-4 px-sm-4 py-5 width--full">
            {{#each pointers as |point| }}
            &#10004; {{ point }}<br>
            {{/each}}
            {{this.text}}
            {{!-- Here is some example text --}}
            <!--- Replace with text data {{this.text}}--->
          </div>
          <!--- Replace with a href data or write post function, depending on logic --->
          <div class="card-price width--full text-center">
            {{#if (lookup ../data this.type) }}
            <h2 class="pb-4 text-white"></h2>
            {{else}}
            <h2 class="pb-3 text-white" id="{{this.type}}curr_price">${{this.price}}</h2>
            {{/if}}
            {{#if (lookup ../data this.type) }}
            <button onclick="takeExam({{this.type}})" class="btn text-body" data-price="{{this.price}}"
              id="{{this.type}}">
              Take Exam
            </button>
            {{else}}
            <!--<div>
              <input type="text" name="codeName" placeholder="promo-code (optional)" id="{{this.type}}codeName">
              <button type="button" onclick="checkCode({{this.type}},{{this.price}})">Apply Code</button>
            </div>-->

            <div class="promoCode-block" id="{{this.type}}PromoCodeBlock">
              <div class="input-group mb-3">
                <input type="text" class="form-control" name="codeName" placeholder="promo-code (optional)"
                  id="{{this.type}}codeName">
                <div class="input-group-append">
                  <button type="button" class="btn btn-dark"
                    onclick="checkCode({{this.type}},{{this.price}})">Apply</button>
                </div>
              </div>
            </div>

            <button onclick="handlePayment({{this.type}},{{this.price}})" class="btn text-body btn-light mb-3"
              data-price="{{this.price}}" id="{{this.type}}">
              ENROLL
            </button>
            <div class="promoCode-btn" id="{{this.type}}PromoCodeBtn">*Apply promo code</div>

            <div id="btn-paymentModal{{this.type}}" style="display:none" data-toggle="modal"
              data-target="#paymentModal{{this.type}}">
            </div>

            <!-- Modal -->
            <div class="modal fade" id="paymentModal{{this.type}}" tabindex="-1" role="dialog"
              aria-labelledby="paymentModalTitle" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLongTitle">Please Select Payment Method</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div class="modal-body">
                    <button type="button" style="btn btn-primary" onclick="payViaXdc({{this.type}},{{this.price}})"
                      data-dismiss="modal"> Pay Via XDC* </button>
                    <button type="button" style="btn btn-primary" onclick="pay({{this.type}},{{this.price}})"
                      data-dismiss="modal">
                      Pay Via PayPal </button>
                  </div>
                  <div class="modal-footer">
                    *<a href="https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo"
                      target="_blank">XinPay</a> &nbsp; web-extension is required
                  </div>
                </div>
              </div>
            </div>




            <div id="btn-XinPayNotifier{{this.type}}" style="display:none" data-toggle="modal"
              data-target="#XinPayNotifier{{this.type}}">
            </div>

            <!-- Modal -->
            <div class="modal fade" id="XinPayNotifier{{this.type}}" tabindex="-1" role="dialog"
              aria-labelledby="XinPayNotifierTitle" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                  <div class="modal-header">
                    <h3 class="modal-title">XinPay</h3>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>
                  <div style="text-align: left;margin:10px">
                    <p>
                      Please note that in order to make a payment via XDC you need to have <a target="_blank"
                        href="https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo"
                        class="tooltip-test nobr" title="XinPay : XinFin's official web-extension">
                        XinPay</a> -
                      XinFin's official web-extension for payments installed.<br>
                      If you have not installed it, please install it via this <a target="_blank"
                        href="https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo"
                        class="tooltip-test nobr" title="XinPay : XinFin's official web-extension">
                        link</a>.
                    </p>

                    <p>
                      <strong>Note:</strong> For smooth transaction please diable
                      any other web3 providers like Metamask, etc., you can enable them later.
                    </p>
                  </div>

                  <div class="modal-footer">

                    <button type="button" data-dismiss="modal">Close</button>
                    <buton type="button" onclick="launchXinPay({{this.type}},{{this.price}})" data-dismiss="modal">Done
                    </buton>
                  </div>
                </div>
              </div>
            </div>




            {{/if}}

          </div>
        </div>
      </div>
    </div>
    {{/each}}

  </div>
</div>

<script type="text/javascript">

  function takeExam(slug) {

    $.ajax({
      method: "get",
      url: "/api/current_user",
      success: response => {
        if (response.status) {
          if (confirm(`Certificate will be issued on name "${response.user.name}" Press OK to confirm or else CANCEL & edit your name via the PROFILE tab.`)) {
            if (slug.id === "course_1") {
              window.location = '/blockchain-basic-exam'
            } else if (slug.id === "course_2") {
              window.location = '/blockchain-advanced-exam'
            } else if (slug.id === "course_3") {
              window.location = '/blockchain-professional-exam'
            } else {
              window.location = '/'
            }
          }
        }
      }
    })
  }

  function handlePayment(course_id, price) {
    console.log(`Course ID: ${course_id} & Price: ${price}`);
    console.log(`Course ID: ${course_id.id} & Price: ${price}`);
    const codeName = document.getElementById(course_id.id + "codeName").value;
    if (codeName.trim().length == 0) {
      // no promo code used
      $(`#btn-paymentModal${course_id.id}`).click();
    } else
      $.ajax({
        url: "/api/checkCode",
        method: "post",
        data: { codeName: codeName },
        success: (result) => {
          console.log(result);
          if (result.error == null) {
            const finalAmt = Math.round((parseFloat(price) - parseFloat(result.discAmt)) * 100) / 100;

            // Not a free course load the Payment Modal
            $(`#btn-paymentModal${course_id.id}`).click();

          }
          else {
            $.notify(result.error, { type: "danger" })
          }
        },
        error: xhr => {
          $.notify(xhr.statusText, { type: "danger" })
        }
      })
  }

  function pay(course_id, price) {
    const email = localStorage.getItem('email');
    const codeName = document.getElementById(course_id.id + "codeName").value;
    console.log(course_id.id + "codeName");
    console.log(codeName);
    $(`#${course_id.id}`).attr("disabled", true);
    $.ajax({
      url: "/pay",
      method: 'post',
      data: { 'email': email, 'course_id': course_id.id, 'price': price, codeName: codeName },
      success: function (data) {
        console.log(data);
        if (data.status == '200')
          window.location.href = data.link;
        else if (data.status == "201")
          if (!alert(data.message)) { window.location.reload(); }
          else
            alert(data.message);
        else {
          $.notify(data.message, { type: "danger" })
        }
      }
    });
  }

  async function payViaXdc(course_id, price) {
    // check if the 
    // need to check if the user is logged in.

    if (typeof InstallTrigger !== "undefined") {
      $.notify("This feature is only available for Chrome users for now, we'll support FireFox shortly", { type: "danger" })
      return;
    }
    else if (!!!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)) {
      $.notify("This feature is not available in this browser, please try again using Chrome browser", { type: "danger" })
      return;
    }
    else if (!!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime)) {

      // proper browser
      $(`#btn-XinPayNotifier${course_id.id}`).click();

    }
  }

  // using 10000 as the divisor for testing purpose
  async function launchXinPay(course_id, price) {
    if (window.web3 == undefined) {
      // no web3 provider is available, ask to install XinPay
      $.notify("Please install <strong><a target='_blank' href='https://chrome.google.com/webstore/detail/xinpay/bocpokimicclpaiekenaeelehdjllofo'>XinPay</a></strong> and login & setup your wallet to continue.")
      return;
    }

    window.web3.version.getNetwork((err, providerNetworkId) => {
      if (err) { $.notify("Oops, error occurred while getting the network ID"); return; }

      if (providerNetworkId == 50) {
        if (window.web3.eth.coinbase == undefined) {
          $.notify("Please login & setup your <strong>XinPay</strong> web-extension to continue.")
          return;
        }
        // is on XinFin mainnet
        $.ajax({
          method: "get",
          url: "https://api.coinmarketcap.com/v1/ticker/xinfin-network/",
          success: async response => {
            if (!response[0].price_usd) {
              // New format? 
              $.notify("Some error occured while fetching the current XDC price, please try again later.", { type: "danger" });
              return;
            }
            const priceUsd = parseFloat(response[0].price_usd);
            const coursePriceXdc = parseFloat(price) / (10000 * priceUsd)
            console.log(`Original Price: ${price} PriceUSD: ${priceUsd} Final Amnt: ${coursePriceXdc}`)
            await ethereum.enable();

            window.web3.eth.sendTransaction({ to: window.web3.eth.coinbase, gasPrice: web3.toWei(11, "gwei"), value: web3.toWei(coursePriceXdc, "ether") }, (err, result) => {
              if (err) {
                console.error(err)
                $.notify("<b>XinPay</b> : Some error while creating or processing this transaction.", { type: "danger" });
                return;
              }
              else {
                // transaction processed; lets register this tx on blockdegree.
                console.log("Transaction Hash: ", result);
                $.notify("The payment process has been initiated");
                $.ajax({
                  method: "post",
                  url: "/api/payViaXdc",
                  data: { course: course_id.id, price: (coursePriceXdc / 10000).toString(), txn_hash: result },
                  success: response => {
                    if (!response.status) {
                      // Error, its ok.
                      $.notify(`<b>Error</b> : ${response.error} `, { type: "danger" });
                      return
                    } else {
                      alert(`Success : Your transaction is now approved & you're enolled in our course, your txn-hash is ${response.txnHash}.`);
                      window.location.reload();
                      return;
                    }
                  },
                  error: xhr => {
                    // YIKES, ask to copy txn & mail at info@blockdegree.org
                    $.notify(`<b>Error</b> : Your txn was processed, but something went from our side. Don't worry, just send a mail to info@blockdegree.org with your tx hash.`, { type: "success" });
                    return;
                  }
                })
              }

            })
          },
          error: xhr => {
            $.notify("Some error occured while fetching the current XDC price, please try again later.", { type: "danger" });
            return;
          }
        })
      }
      else if (providerNetworkId == 51) {
        // User is on Apothem
        $.notify("Looks like your wallet is on XinFin Apothem Network, please switch to XinFin Mainnet to make payment", { type: "danger", delay: 5000 });
        return;
      }
      else {
        // Looks like you're using some other web-extension as web3 provider. Please disable other web3 extensions like metamask, mist and enable only XinPay & then try again.
        $.notify("Looks like you're using some other web-extension as web3 provider. Please <b>disable</b> other web3 extensions like <b>Metamask</b>, <b>Mist</b> and enable only <b>XinPay</b>, refresh & then try again.", { type: "danger", delay: 5000 });
        return;
      }
    })




  }

  function checkCode(course_id, price) {
    const codeName = document.getElementById(course_id.id + "codeName").value;
    $.ajax({
      url: "/api/checkCode",
      method: "post",
      data: { codeName: codeName },
      success: (result) => {
        console.log(result);
        if (result.error == null) {
          const finalAmt = Math.round((parseFloat(price) - parseFloat(result.discAmt)) * 100) / 100;
          if (finalAmt < 0) {
            // free course
            document.getElementById(course_id.id + "curr_price").innerHTML = "$0";
          }
          else {
            document.getElementById(course_id.id + "curr_price").innerHTML = "$" + finalAmt;
          }
        }
        else {
          $.notify(result.error, { type: "danger" })
        }
      }
    })
  }

</script>